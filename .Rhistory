#function "t.test" gives CIs for a single mean
#need to specify confidence level as the argument
#going back to our data for cars:
conf_ints = t.test(cars$speed, conf.level = 0.95)
#function "t.test" gives CIs for a single mean
#need to specify confidence level as the argument
#going back to our data for cars:
conf_ints = t.test(cars$speed, conf.level = 0.95)
conf_ints
#function "t.test" gives CIs for a single mean
#need to specify confidence level as the argument
#going back to our data for cars:
conf_ints = t.test(cars$speed, conf.level = 0.95)
conf_ints$conf.int
#printing out the intervals, we see they've got a LOT of decimals.
#let's trim those down by rounding:
rounded_ints = round(conf_ints$conf.int, digits = 4)
#function "t.test" gives CIs for a single mean
#need to specify confidence level as the argument
#going back to our data for cars:
conf_ints = t.test(cars$speed, conf.level = 0.95)
conf_ints$conf.int
#printing out the intervals, we see they've got a LOT of decimals.
#let's trim those down by rounding:
rounded_ints = round(conf_ints$conf.int, digits = 4)
rounded_ints
#function "t.test" gives CIs for a single mean
#need to specify confidence level as the argument
#going back to our data for cars:
conf_ints = t.test(cars$speed, conf.level = 0.95)
conf_ints$conf.int
#printing out the intervals, we see they've got a LOT of decimals.
#let's trim those down by rounding:
rounded_ints = round(conf_ints$conf.int, digits = 4)
rounded_ints
lower_bound = rounded_ints[1]
upper_bound = rounded_ints[2]
library(MASS)
head(cats)
#we'll be using another database built into R, "cats"
library(MASS)
head(cats)
#we want to determine the CI for the DIFFERENCE in two means
#the general eq'n formula:
#confintfortwo = t.test(numericcolumn ~ groupcolumn, data = datasetname, conf.level = 1 - alpha)
the_conf_int = t.test(hwt ~ sex, data = cats, conf.level = 0.95)
#we'll be using another database built into R, "cats"
library(MASS)
head(cats)
#we want to determine the CI for the DIFFERENCE in two means
#the general eq'n formula:
#confintfortwo = t.test(numericcolumn ~ groupcolumn, data = datasetname, conf.level = 1 - alpha)
the_conf_int = t.test(bwt ~ sex, data = cats, conf.level = 0.95)
#we'll be using another database built into R, "cats"
library(MASS)
head(cats)
#we want to determine the CI for the DIFFERENCE in two means
#the general eq'n formula:
#confintfortwo = t.test(numericcolumn ~ groupcolumn, data = datasetname, conf.level = 1 - alpha)
the_conf_int = t.test(Hwt ~ sex, data = cats, conf.level = 0.95)
#we'll be using another database built into R, "cats"
library(MASS)
head(cats)
#we want to determine the CI for the DIFFERENCE in two means
#the general eq'n formula:
#confintfortwo = t.test(numericcolumn ~ groupcolumn, data = datasetname, conf.level = 1 - alpha)
the_conf_int = t.test(Hwt ~ Sex, data = cats, conf.level = 0.95)
the_conf_int$conf.int
#we'll be using another database built into R, "cats"
library(MASS)
head(cats)
#we want to determine the CI for the DIFFERENCE in two means
#the general eq'n formula:
#confintfortwo = t.test(numericcolumn ~ groupcolumn, data = datasetname, conf.level = 1 - alpha)
the_conf_int = t.test(Hwt ~ Sex, data = cats, conf.level = 0.95)
the_conf_int$conf.int
another_lower_bound = the_conf_int[1]
another_upper_bound = the_conf_int[2]
another_lower_bound
another_upper_bound
another_lower_bound
another_lower_bound
another_upper_bound
the_conf_int$conf.int
#we'll be using another database built into R, "cats"
library(MASS)
head(cats)
#we want to determine the CI for the DIFFERENCE in two means
#the general eq'n formula:
#confintfortwo = t.test(numericcolumn ~ groupcolumn, data = datasetname, conf.level = 1 - alpha)
the_conf_int = t.test(Hwt ~ Sex, data = cats, conf.level = 0.95)
the_conf_int$conf.int
another_lower_bound = the_conf_int$conf.int[1]
another_upper_bound = the_conf_int$conf.int[2]
another_lower_bound
another_upper_bound
#the data we'll be working with:
nonsmokers = c(18,22,21,17,20,17,23,20,22,21)
smokers = c(16,20,14,21,20,18,13,15,17,21)
smoke = data.frame(score = c(nonsmokers,smokers),group = rep(c("Non-Smoke","Smoke"),times = c(length(nonsmokers),length(smokers))) )
#code, also provided by worksheet:
#to run a 2-sided test for the alternative hypothesis,
two.side = t.test(score ~ group, data = smoke, conf.level = 0.99,alternative = "two.sided")
#to run a one-sided, greater than test,
greater = t.test(score ~ group, data = smoke, conf.level = 0.99,alternative = "greater")
#to run a one-sided, less than test
less = t.test(score ~ group, data = smoke, conf.level = 0.99,alternative = "less")
#code, also provided by worksheet:
#to run a 2-sided test for the alternative hypothesis,
two.side = t.test(score ~ group, data = smoke, conf.level = 0.99,alternative = "two.sided")
#to run a one-sided, greater than test,
greater = t.test(score ~ group, data = smoke, conf.level = 0.99,alternative = "greater")
#to run a one-sided, less than test
less = t.test(score ~ group, data = smoke, conf.level = 0.99,alternative = "less")
#to see the p-value for one of these tests
less$p.value
#code, also provided by worksheet:
#to run a 2-sided test for the alternative hypothesis,
two.side = t.test(score ~ group, data = smoke, conf.level = 0.99,alternative = "two.sided")
#to run a one-sided, greater than test,
greater = t.test(score ~ group, data = smoke, conf.level = 0.99,alternative = "greater")
#to run a one-sided, less than test
less = t.test(score ~ group, data = smoke, conf.level = 0.99,alternative = "less")
#to see the p-value for one of these tests
less$p.value
#and test-statistic:
less$statistic
#Goal of ANOVA: see if the means of different groups are different
#we will be using PlantGrowth, a dataset built into R
names(PlantGrowth)
#Goal of ANOVA: see if the means of different groups are different
#we will be using PlantGrowth, a dataset built into R
names(PlantGrowth)
#shows us two groups: weight (numerical) and group (categorical)
#first, need to process the data in a way that ANOVA will work with it.
datastuff = lm(weight ~ group, data = PlantGrowth)
#Goal of ANOVA: see if the means of different groups are different
#we will be using PlantGrowth, a dataset built into R
names(PlantGrowth)
#shows us two groups: weight (numerical) and group (categorical)
#first, need to process the data in a way that ANOVA will work with it.
datastuff = lm(weight ~ group, data = PlantGrowth)
#now, we can use the ANOVA function
anovatable = anova(datastuff)
anovatable
#Goal of ANOVA: see if the means of different groups are different
#we will be using PlantGrowth, a dataset built into R
names(PlantGrowth)
#shows us two groups: weight (numerical) and group (categorical)
#first, need to process the data in a way that ANOVA will work with it.
datastuff = lm(weight ~ group, data = PlantGrowth)
#now, we can use the ANOVA function
anovatable = anova(datastuff)
anovatable
#note that the "group" row gives df(between), SS(between), MS(between), Fs, and P(F > Fs)
#the Residuals row gives us df(within), SS(within), MS(within)
#we will need to pull specific bits of data from the table in order to use them
F.stat = anovatable[1,4]
p.value = anovatable[1,5]
#Goal of ANOVA: see if the means of different groups are different
#we will be using PlantGrowth, a dataset built into R
names(PlantGrowth)
#shows us two groups: weight (numerical) and group (categorical)
#first, need to process the data in a way that ANOVA will work with it.
datastuff = lm(weight ~ group, data = PlantGrowth)
#now, we can use the ANOVA function
anovatable = anova(datastuff)
anovatable
#note that the "group" row gives df(between), SS(between), MS(between), Fs, and P(F > Fs)
#the Residuals row gives us df(within), SS(within), MS(within)
#we will need to pull specific bits of data from the table in order to use them
F.stat = anovatable[1,4]
p.value = anovatable[1,5]
F.stat
p.value

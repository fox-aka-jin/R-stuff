---
title: "R Notebook"
output: html_notebook
---

4/27/19

Hoping to make up for lost time from last week this week. If I work on R a little bit each day, I should be able to learn quite a bit!

I'm working here in R Markdown/Notebook mode, as I read somewhere it's a good practice to do so.

Today, I'll be working on the 3rd Handout from my STA 100 course. It will be using the built-in dataset *cars*.

QQ-PLOT OR NORMAL PROBABILITY PLOT
```{r}
# QQ-Plot, aka Normal Probability Plot
  #checks normality of data distribution
  #normality = a method to determine outliers, skewness, etc.

class(cars)
View(cars)
#remember: it is a good practice to start by looking at the class of the data, as well as at the data itself.
  #we see that the class is "dataframe."

qqnorm(cars$speed, main = "Normality Plot for Car Speed")
qqline(cars$speed) #<-- gives us the line itself

```


CALCULATING PROPORTIONS OF DATA BETWEEN 1, 2, or 3 STANDARD DEVIATIONS FROM THE MEAN
```{r}
#we will be making and saving info about our data
#our dataset is "cars," and we can look at stuff like sd and mean

X = cars$speed
the_mean = mean(X)
the_sd = sd(X)
within_one_sd = mean(X < the_mean + the_sd & X > the_mean - the_sd)
within_one_sd

#the above is what the worksheet wants me to do, though I wonder if I can get R to print out just *one* of the sd values:
the_mean + the_sd
#okay, that works. Could I get a coordinate of two values, then?
one_sd_away = c(the_mean + the_sd, the_mean - the_sd)
one_sd_away
#cool, so the above code DOES give me two values for SD. so then, what if...
another_way_within_one_sd = mean(X < one_sd_away[1] & X > one_sd_away[2])
another_way_within_one_sd

#in hindsight, I think this process was less efficient in terms of how much I had to type, but it's neat that I figured out that I didn't forget too much in the time I didn't code.

#as the worksheet implies, of course, we can easily calculate how much of our data is within 2 standard dev's
within_two_sd = mean(X < the_mean + 2*the_sd & X > the_mean - 2*the_sd)
within_two_sd


```

4/29/19

Yesterday: worked on configuring a repository on Github. This was successful, and my repository can be seen at:
https://github.com/fox-aka-jin/R-stuff

I think I will make a guide on configuring a Github soon to share with others in my lab group. Then again, the tutorial they have is already easy enough - but perhaps something more step-by-step and all-encompassing would be good. The GitHub tutorial just says "here's stuff, do it," rather than explain.


Today: Going to do the 5th handout worksheet from my STA 100 class. Though the coding is simple, I figure that the information I'm going over will be invaluable in the future.

CONFIDENCE INTERVALS FOR A SINGLE MEAN
```{r}
#function "t.test" gives CIs for a single mean
#need to specify confidence level as the argument
#going back to our data for cars:

conf_ints = t.test(cars$speed, conf.level = 0.95)
conf_ints$conf.int

#printing out the intervals, we see they've got a LOT of decimals.
#let's trim those down by rounding:

rounded_ints = round(conf_ints$conf.int, digits = 4)
rounded_ints
lower_bound = rounded_ints[1]
upper_bound = rounded_ints[2]

```

CONFIDENCE INTERVAL FOR INDEPENDENT SAMPLES
```{r}
#we'll be using another database built into R, "cats"
library(MASS)
head(cats)

#we want to determine the CI for the DIFFERENCE in two means
#the general eq'n formula:

#confintfortwo = t.test(numericcolumn ~ groupcolumn, data = datasetname, conf.level = 1 - alpha)

the_conf_int = t.test(Hwt ~ Sex, data = cats, conf.level = 0.95)
the_conf_int$conf.int

another_lower_bound = the_conf_int$conf.int[1]
another_upper_bound = the_conf_int$conf.int[2]

another_lower_bound
another_upper_bound

#remember: it is CRITICAL that we do variable$conf.int when printing out
```


5/1/20

Today, I'll work on the 6th STA 100 worksheet:

HYPOTHESIS TEST FOR INDEPENDENT SAMPLES - THE DATA
```{r}
#the data we'll be working with, provided by the worksheet:
  #(definitely not skilled enough to manipulate data like this yet)
nonsmokers = c(18,22,21,17,20,17,23,20,22,21)
smokers = c(16,20,14,21,20,18,13,15,17,21)
smoke = data.frame(score = c(nonsmokers,smokers),group = rep(c("Non-Smoke","Smoke"),times = c(length(nonsmokers),length(smokers))) )

```


HYPOTHESIS TEST FOR INDEPENDENT SAMPLE
```{r}
#code, also provided by worksheet:

#to run a 2-sided test for the alternative hypothesis,
two.side = t.test(score ~ group, data = smoke, conf.level = 0.99,alternative = "two.sided")

#to run a one-sided, greater than test,
greater = t.test(score ~ group, data = smoke, conf.level = 0.99,alternative = "greater")

#to run a one-sided, less than test
less = t.test(score ~ group, data = smoke, conf.level = 0.99,alternative = "less")


#to see the p-value for one of these tests
less$p.value
#and test-statistic:
less$statistic

```


ANOVA STUFF
```{r}
#Goal of ANOVA: see if the means of different groups are different
#we will be using PlantGrowth, a dataset built into R
names(PlantGrowth)
#shows us two groups: weight (numerical) and group (categorical)

#first, need to process the data in a way that ANOVA will work with it.
datastuff = lm(weight ~ group, data = PlantGrowth)

#now, we can use the ANOVA function
anovatable = anova(datastuff)
anovatable

#note that the "group" row gives df(between), SS(between), MS(between), Fs, and P(F > Fs)
#the Residuals row gives us df(within), SS(within), MS(within)
#we will need to pull specific bits of data from the table in order to use them

F.stat = anovatable[1,4]
p.value = anovatable[1,5]

F.stat
p.value
```


